#!/bin/bash

# This script fetches data for a list of Pokémon from the PokeAPI.
# It includes robust error handling and a retry mechanism for each request.

# Define a list of Pokémon to fetch.
# The list includes one valid and one invalid name to demonstrate error handling.
pokemon_list=("pikachu" "charizard" "invalid_pokemon" "squirtle")

# Set the maximum number of retries.
MAX_RETRIES=3

# Clear the error log file before starting.
> errors.txt

# Loop through each Pokémon in the list.
for pokemon in "${pokemon_list[@]}"; do
    echo "Attempting to fetch data for $pokemon..."

    # Initialize retry counter.
    retries=0
    
    # Start the retry loop.
    while [ $retries -lt $MAX_RETRIES ]; do
        # Use curl to make the request.
        # -s: Silent mode, no progress meter.
        # -f: Fail fast on server errors (4xx/5xx).
        # >: Redirect stdout (JSON data) to a file.
        # 2>&1: Redirect stderr to stdout.
        # ||: Logical OR, check if the command failed.
        if curl -sf "https://pokeapi.co/api/v2/pokemon/$pokemon" > "$pokemon.json" 2>&1; then
            echo "Successfully fetched data for $pokemon."
            # Break the retry loop if successful.
            break
        else
            retries=$((retries+1))
            # Log the error and the retry attempt.
            echo "Error fetching $pokemon (attempt $retries of $MAX_RETRIES)." >> errors.txt
            
            # If it's not the last attempt, sleep for a bit before retrying.
            if [ $retries -lt $MAX_RETRIES ]; then
                sleep 2
            fi
        fi
    done

    # If retries have been exhausted and the file doesn't exist, it's a permanent failure.
    if [ ! -f "$pokemon.json" ]; then
        echo "Failed to fetch $pokemon after $MAX_RETRIES attempts." >> errors.txt
    fi
done

echo "Script finished. Check data files and errors.txt for results."
