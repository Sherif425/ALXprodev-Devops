#!/bin/bash

# Create directory for Pokémon data
mkdir -p pokemon_data

# List of Pokémon to fetch
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Base API URL
api_url="https://pokeapi.co/api/v2/pokemon"

# Delay between requests (in seconds)
delay=2

# Log file for errors
error_log="pokemon_errors.log"
echo "Failed Pokémon downloads - $(date)" > "$error_log"

for pokemon in "${pokemon_list[@]}"; do
  echo "Fetching data for $pokemon..."
  
  retry_count=0
  max_retries=3
  success=false
  
  while [ $retry_count -lt $max_retries ] && [ "$success" = false ]; do
    # Make API request
    response=$(curl -s -w "%{http_code}" "${api_url}/${pokemon}" -o "pokemon_data/${pokemon}.json.tmp")
    status_code=${response: -3}
    
    # Validate response
    if [ "$status_code" -eq 200 ] && jq -e . "pokemon_data/${pokemon}.json.tmp" >/dev/null 2>&1; then
      success=true
      mv "pokemon_data/${pokemon}.json.tmp" "pokemon_data/${pokemon}.json"
      echo "Saved data to pokemon_data/${pokemon}.json ✅"
    else
      retry_count=$((retry_count + 1))
      echo "Attempt $retry_count failed for $pokemon (HTTP $status_code)"
      rm -f "pokemon_data/${pokemon}.json.tmp"
      
      if [ $retry_count -lt $max_retries ]; then
        echo "Retrying in $delay seconds..."
        sleep $delay
      fi
    fi
  done
  
  if [ "$success" = false ]; then
    echo "Failed to fetch $pokemon after $max_retries attempts ❌"
    echo "$pokemon (HTTP $status_code)" >> "$error_log"
    rm -f "pokemon_data/${pokemon}.json" 2>/dev/null
  fi
  
  # Add delay between Pokémon requests
  sleep $delay
done

echo -e "\nDownload summary:"
echo "Successful: $(ls -1 pokemon_data/*.json 2>/dev/null | wc -l)"
echo "Failed: $(grep -vc "^Failed" "$error_log")"
echo "Error log: $error_log"